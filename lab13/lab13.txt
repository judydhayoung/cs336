a. What benefit did using the React Router bring to the application?
It enables better browsing history.

b. Which is better, hash history or browser history?
Browser history! Because it enables readable, clean urls while hash history adds a string after the # in the url.

c. Why does the server (either Webpack Dev Server or the Express server) have to be modified to support the browser history?
Compare this with the hash-based server demonstrated in class, which didn't require such modifications.
A react router uses the HTML5 history API (pushState, replaceState and the popstate event) to keep your UI in sync with the URL.

a. What state does the new CommentEdit component maintain and how does that compare with the state maintained by the CommentBox component?
CommentBox maintains isMounted state and all of data.
CommentEdit maintains author and text as state.

b. What does the CommentEdit component do when the AJAX PUT or DELETE methods return successfully? How does this compare with what the “Cancel” button provided by the CommentEdit component does?
It switches context back to main index page('/') of router with the change. i.e., it pushes a new entry onto the history stack.
The "Cancel" button just serves the index file because there are no http methods to be called.

c. How is the Link added in the last step different from a simple HTML hyperlink?
React router's Link is capable of keeping track of the Router it was rendered in. It's better for keeping "browsing history". A html hyperlink just renders the page.

product13 branch deployed at:
https://comments-mern.herokuapp.com/
