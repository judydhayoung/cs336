Explain:
1. the component structure of the application. What makes the UI composable and why does this matter?

Component structure splits the UI into independent, reusable pieces, and think about each piece in isolation. Instead of artificially separating�technologies�by putting markup and logic in separate files, React�separates�concerns�with loosely coupled units called �components� that contain both.

Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called �props�) and return React elements describing what should appear on the screen.

2. what JSX does.
JSX is a preprocessor step that adds XML syntax to JavaScript. In other words, it is a syntax extension to JavaScript.

It is used with React to describe what the UI should look like. It is not required to use JSX for React, but most people find it helpful as a visual aid when working with UI inside the JavaScript code. It also allows React to show more useful error and warning messages.

Just like XML, JSX tags have a tag name, attributes, and children. If an attribute value is enclosed in quotes, the value is a string. Otherwise, wrap the value in braces and the value is the enclosed JavaScript expression
3. why ReactJS is safe with respect to XSS.
XSS (cross-site-scripting) attacks can be prevented in ReactJS,
because it converts everything to a string
(escapes any values embedded in JSX) before rendering them.
It ensures that you can never inject anything that�s not
explicitly written in your application, thus preventing injection attacks.

4. how the data flows through the components. How are comments loaded? created? saved.
The data from comments.json is loaded in server.js which is parsed and returned to the server. It is created in the comment form and upon submit, it is passed to comment box and added to the list of comments.

5. the nature and purpose of props and state. Which is immutable and which is mutable and why does this distinction matter?

It is important to have this distinction because it permits interaction between components. This state framework guarantees that the UI is always consistent with the inputs.

Props are immutable.
They are passed from the parent and are �owned� by the parent.
Each component renders itself once based on its props

States are mutable.
This.state is private to the component and can be changed by calling this.setState().
When the state updates, the component re-renders itself.


Try editing the comments.json file (to add or remove a legal comment). What happens and why?
The comments on the web server are automatically changed whenever comments.json file gets changed. The application displays the current state of comments.json because it checks on the file every 2 seconds.


When the CommentBox has loaded comments from the server (in loadCommentsFromServer()), why doesn't it call render() to make them visible?
It doesn't call render() because calling it would render the whole page and changes would be lost. loadCommentsFromServer() updates the state of comments and adds the comments submitted through comment form.


Of what advantage, if any, is it to require that components always represent the current state of the view?
It decreases the waiting time for the user.

The app implements optimistic updates. Isn�t optimism here more like foolishness? What if the server rejects the new comment (for whatever reason)?
It could strike someone as foolishness, but the user will wait less and quicker responses are crucial to UX.
